<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="/css/ml_page.css" />
    <%- include('../partials/head') %>
  </head>

  <body>
    <div class="titles">Wall Squat</div>

    <!-- 1. Start 버튼을 누르면 init() 함수가 실행된다. -->

    <div style="display: flex">
      <button type="button" class="btn btn-outline-success" onclick="init()">
        시작하기
      </button>
      <button type="button" class="btn btn-outline-danger" onclick="finish()">
        멈추기
      </button>
    </div>

    <div>
      <canvas id="canvas"></canvas>
    </div>

    <div id="label-container"></div>

    <div class="frame">
      <div>
        <div class="headline">
          <div>벽 스쿼트 카운터</div>
        </div>
        <!--  -->
        <div class="circle-big">
          <div class="text">
            <!-- 28<div class="hits">개</div> -->
            <span id="Counter" class="counter">0</span>번
          </div>
          <svg>
            <circle class="bg" cx="57" cy="57" r="52"></circle>
            <circle class="progress" cx="57" cy="57" r="52"></circle>
          </svg>
        </div>
        <!--  -->
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@teachablemachine/pose@0.8/dist/teachablemachine-pose.min.js"></script>
    <script type="text/javascript">
      // More API functions here:
      // https://github.com/googlecreativelab/teachablemachine-community/tree/master/libraries/pose

      // the link to your model provided by Teachable Machine export panel

      // const URL = "../my_model/";

      let model, webcam, ctx, labelContainer, maxPredictions;

      // 모델을 불러오고 loop 함수를 실행한다.
      async function init() {
        const modelURL = "/squat_model/model.json";
        const metadataURL = "/squat_model/metadata.json";

        // load the model and metadata
        // Refer to tmImage.loadFromFiles() in the API to support files from a file picker
        // Note: the pose library adds a tmPose object to your window (window.tmPose)
        model = await tmPose.load(modelURL, metadataURL);
        maxPredictions = model.getTotalClasses();

        // Convenience function to setup a webcam
        const size = 650;
        const flip = true; // whether to flip the webcam
        webcam = new tmPose.Webcam(size, size, flip); // width, height, flip
        await webcam.setup(); // request access to the webcam
        await webcam.play();
        window.requestAnimationFrame(loop);

        // append/get elements to the DOM
        const canvas = document.getElementById("canvas");
        canvas.width = size;
        canvas.height = size;
        ctx = canvas.getContext("2d");
        labelContainer = document.getElementById("label-container");
        for (let i = 0; i < maxPredictions; i++) {
          // and class labels
          labelContainer.appendChild(document.createElement("div"));
        }
      }

      // 3. 자신을 계속 호출한다. 웹캠을 업데이트하고 predict() 함수를 실행한다.
      async function loop(timestamp) {
        webcam.update(); // update the webcam frame
        await predict();
        window.requestAnimationFrame(loop);
      }

      // 4. 모델의 불러와서 결과를 뽑아낸 다음 클래스이름과 가능성을 문장으로 만들어서 html에 넣어준다.
      let status = "stand";
      let count = 0;
      let time1 = 0;
      let time2 = 0;
      let elapsedTime = 0;

      async function predict() {
        // Prediction #1: run input through posenet
        // estimatePose can take in an image, video or canvas html element
        const { pose, posenetOutput } = await model.estimatePose(webcam.canvas);
        // Prediction 2: run input through teachable machine classification model
        const prediction = await model.predict(posenetOutput);

        //
        // prediction[0] = wallsquat
        // prediction[1] = stand
        if (prediction[0].probability.toFixed(2) > 0.9) {
          time1 = new Date().getTime();
        } else if (
          // stand자세로 돌아오거나 plank 자세가 무너진 경우
          prediction[1].probability.toFixed(2) > 0.9 ||
          prediction[0].probability.toFixed(2) < 0.2
        ) {
          time2 = new Date().getTime();
          elapsedTime = (time2 - time1) / 1000;
          if (elapsedTime >= 10) {
            console.log("10초 버팀, count 1 증가");
          } else {
            console.log("10초 못 버팀, 힘내세요");
          }
        }

        // 출력내용 : "클래스 이름 : 0.00 ~ 1.00"
        for (let i = 0; i < maxPredictions; i++) {
          const classPrediction =
            prediction[i].className +
            ": " +
            Math.round(prediction[i].probability.toFixed(2) * 100) +
            " %";
          labelContainer.childNodes[i].innerHTML = classPrediction;
        }

        // finally draw the poses
        drawPose(pose);
      }

      function drawPose(pose) {
        if (webcam.canvas) {
          ctx.drawImage(webcam.canvas, 0, 0);
          // draw the keypoints and skeleton
          if (pose) {
            const minPartConfidence = 0.5;
            tmPose.drawKeypoints(pose.keypoints, minPartConfidence, ctx);
            tmPose.drawSkeleton(pose.keypoints, minPartConfidence, ctx);
          }
        }
      }

      /////////////////////////////////////////////////////////////////////////////////////
      let hits = 0;
      // let countElement = document.querySelector('.counter');
      let countElement2 = document.getElementById("Counter");

      document.body.onkeyup = function (e) {
        if (e.keyCode == 32) {
          addHit();
        }
      };

      let counterUp = function () {
        addHit();
      };

      let addHit = function () {
        hits++;
        renderHits();
      };

      let renderHits = function () {
        // countElement.innerHTML = hits;
        countElement2.innerHTML = hits;
      };

      let resetHits = function () {
        hits = 0;
        renderHits();
      };

      function finish() {
        webcam.pause();
      }

      /////////////////////////////////////////////////////////////////////////////////////
    </script>
  </body>
</html>
